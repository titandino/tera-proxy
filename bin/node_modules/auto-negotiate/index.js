const TYPE_NEGOTIATION_PENDING = 35,
	TYPE_NEGOTIATION = 36

const sysmsg = require('tera-data').sysmsg

module.exports = function AutoNegotiate(dispatch) {
	let pendingDeals = [],
		currentDeal = null,
		cancelTimeout = null,
		currentContract = null

	dispatch.hook('sTradeBrokerDealSuggested', event => {
		if(event.offeredPrice.compare(event.sellerPrice) >= 0) {
			pendingDeals.push(event)
			tryNextDeal()
			return false
		}
	})

	dispatch.hook('sTradeBrokerRequestDealResult', event => {
		if(currentDeal) {
			if(!event.ok) endDeal()

			return false
		}
	})

	dispatch.hook('sTradeBrokerDealInfoUpdate', event => {
		if(currentDeal) {
			if(event.buyerStage == 2 && event.sellerStage < 2)
				if(event.price.compare(currentDeal.sellerPrice) >= 0)
					dispatch.toServer('cTradeBrokerDealConfirm', {
						listing: currentDeal.listing,
						stage: event.sellerStage + 1
					})
				else
					endDeal() // We accepted the wrong one, whoops! - TODO: Inspect sRequestContract.data for price and other info

			return false
		}
	})

	dispatch.hook('sRequestContract', event => {
		if(currentDeal && (event.type == TYPE_NEGOTIATION_PENDING || event.type == TYPE_NEGOTIATION)) {
			currentContract = event
			setEndTimeout()
			return false
		}
	})

	dispatch.hook('sReplyRequestContract', replyOrAccept)
	dispatch.hook('sAcceptContract', replyOrAccept)

	dispatch.hook('sRejectContract', event => {
		if(currentDeal && (event.type == TYPE_NEGOTIATION_PENDING || event.type == TYPE_NEGOTIATION)) {
			message(currentDeal.name + ' aborted negotiation.')
			currentContract = null
			endDeal()
			return false
		}
	})

	dispatch.hook('sCancelContract', event => {
		if(currentDeal && (event.type == TYPE_NEGOTIATION_PENDING || event.type == TYPE_NEGOTIATION)) {
			currentContract = null
			endDeal()
			return false
		}
	})

	// 1105 1106
	dispatch.hook('sSystemMessage', event => {
		if(currentDeal) {
			let msg = event.message.split('\x0b'),
				type = msg[0].startsWith('@') ? sysmsg.map.code[msg[0].slice(1)] : ''

			if(type == 'smtMediateTradeCancelMe') return false
			if(type == 'smtMediateTradeCancelOpponent') {
				message(currentDeal.name + ' cancelled negotiation.')
				return false
			}
		}
	})

	function replyOrAccept(event) {
		if(currentDeal && event.type == TYPE_NEGOTIATION_PENDING) {
			setEndTimeout()
			return false
		}
	}

	function tryNextDeal() {
		if(currentDeal || !pendingDeals.length) return

		currentDeal = pendingDeals.shift()

		message('Attempting to negotiate with ' + currentDeal.name + '...')
		message('Price: ' + formatGold(currentDeal.sellerPrice) + ' - Offered: ' + formatGold(currentDeal.offeredPrice))

		const data = Buffer.alloc(30)
		data.writeUInt32LE(currentDeal.playerId, 0)
		data.writeUInt32LE(currentDeal.listing, 4)

		dispatch.toServer('cRequestContract', {
			type: 35,
			unk2: 0,
			unk3: 0,
			unk4: 0,
			name: '',
			data
		})
	}

	function setEndTimeout() {
		clearTimeout(cancelTimeout)
		cancelTimeout = setTimeout(endDeal, pendingDeals.length ? 15000 : 30000)
	}

	function endDeal() {
		clearTimeout(cancelTimeout)

		if(currentContract) {
			message('Negotiation timed out.')
			dispatch.toServer('cCancelContract', {
				type: currentContract.type,
				id: currentContract.id
			})
			currentContract = null
			setEndTimeout()
			return
		}

		currentDeal = null
		tryNextDeal()
	}

	function formatGold(gold) {
		gold = gold.toString()

		let str = ''
		if(gold.length > 4) str += '<font color="#ffb033">' + Number(gold.slice(0, -4)).toLocaleString() + 'g</font>'
		if(gold.length > 2) str += '<font color="#d7d7d7">' + gold.slice(-4, -2) + 's</font>'
		str += '<font color="#c87551">' + gold.slice(-2) + 'c</font>'

		return str
	}

	function message(msg) {
		dispatch.toClient('sChat', {
			channel: 24,
			authorID: 0,
			unk1: 0,
			gm: 0,
			unk2: 0,
			authorName: '',
			message: '(Proxy)' + msg
		})
	}
}
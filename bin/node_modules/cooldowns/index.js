const PING_INTERVAL = 10000,
	PING_HISTORY_MAX = 9

module.exports = function Cooldowns(dispatch) {
	let pings = [],
		pingHistory = [],
		lowPing = 0,
		pingInterval = null

	dispatch.hook('cLoadTopoFin', () => { pingInterval = setInterval(ping, PING_INTERVAL) })
	dispatch.hook('sLoadTopo', event => { clearInterval(pingInterval) })
	dispatch.hook('sReturnToLobby', () => { clearInterval(pingInterval) })

	dispatch.hook('cRequestGamestatPing', () => { pings.push(Date.now()) })
	dispatch.hook('sResponseGamestatPong', () => {
		let pingStart = Infinity
		while(pingStart > 1000 && pings.length) { // Desync correction
			pingStart = pings.shift()
		}

		if(pingStart != Infinity) {
			pingHistory.push(Date.now() - pingStart)

			if(pingHistory.length > PING_HISTORY_MAX) pingHistory.shift()

			lowPing = Infinity
			for(let p of pingHistory) if(p < lowPing) lowPing = p
		}
	})

	dispatch.hook('sStartCooltimeSkill', event => {
		if(event.cooldown > 0) {
			event.cooldown -= lowPing
			return event.cooldown >= 0
		}
	})

	function ping() {
		pings.push(Date.now())
		dispatch.toServer('cRequestGamestatPing')
	}
}

{
  "_args": [
    [
      {
        "raw": "tera-data@github:meishuu/tera-data",
        "scope": null,
        "escapedName": "tera-data",
        "name": "tera-data",
        "rawSpec": "github:meishuu/tera-data",
        "spec": "github:meishuu/tera-data",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:meishuu/tera-data.git",
          "sshUrl": "git+ssh://git@github.com/meishuu/tera-data.git",
          "httpsUrl": "git+https://github.com/meishuu/tera-data.git",
          "gitUrl": "git://github.com/meishuu/tera-data.git",
          "shortcut": "github:meishuu/tera-data",
          "directUrl": "https://raw.githubusercontent.com/meishuu/tera-data/master/package.json"
        }
      },
      "C:\\Users\\Trenton\\desktop\\tera-proxy"
    ]
  ],
  "_from": "meishuu/tera-data",
  "_id": "tera-data@1.0.0",
  "_inCache": true,
  "_location": "/tera-data",
  "_phantomChildren": {},
  "_requested": {
    "raw": "tera-data@github:meishuu/tera-data",
    "scope": null,
    "escapedName": "tera-data",
    "name": "tera-data",
    "rawSpec": "github:meishuu/tera-data",
    "spec": "github:meishuu/tera-data",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:meishuu/tera-data.git",
      "sshUrl": "git+ssh://git@github.com/meishuu/tera-data.git",
      "httpsUrl": "git+https://github.com/meishuu/tera-data.git",
      "gitUrl": "git://github.com/meishuu/tera-data.git",
      "shortcut": "github:meishuu/tera-data",
      "directUrl": "https://raw.githubusercontent.com/meishuu/tera-data/master/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/meishuu/tera-data.git#1569b8e1419fdfaa7c889a599e37e585cd65b0e7",
  "_shasum": "a7ac4ab0f07740151dc38ca039985191b4a0c8e6",
  "_shrinkwrap": null,
  "_spec": "tera-data@github:meishuu/tera-data",
  "_where": "C:\\Users\\Trenton\\desktop\\tera-proxy",
  "author": {
    "name": "meishu"
  },
  "bugs": {
    "url": "https://github.com/meishuu/tera-data/issues"
  },
  "dependencies": {},
  "description": "Platform agnostic repository for information about TERA packets and system messages.",
  "devDependencies": {},
  "gitHead": "1569b8e1419fdfaa7c889a599e37e585cd65b0e7",
  "homepage": "https://github.com/meishuu/tera-data#readme",
  "main": "package.json",
  "name": "tera-data",
  "optionalDependencies": {},
  "readme": "# tera-data\r\n\r\nThis repository is intended to house packet and system message information for\r\nTERA. It is intended to be platform agnostic, with details on the file formats\r\nexplained below.\r\n\r\nThe currently known open source parsers are:\r\n- JavaScript (Node): [tera-data-parser](https://github.com/meishuu/tera-data-parser-js)\r\n\r\n## Mappings\r\n\r\nThe `map` directory contains files which map unique identifiers (names) to their\r\nnumeric values. Currently, this includes:\r\n\r\n- `protocol.map`, which links opcodes to \"packet\" names\r\n- `sysmsg.map`, which links system message IDs to readable names\r\n\r\nThese generally come from the client binary and should not be built or modified\r\nby hand unless you know what you're doing.\r\n\r\nMethods and instructions on dumping opcodes and sysmsgs can be found from:\r\n- [Meishu](https://github.com/meishuu/TeraScanners)\r\n- [Mir](https://github.com/Mirrawrs/Tera/tree/master/GameClientAnalyzer)\r\n- [Gl0](https://github.com/neowutran/TeraDpsMeterData/blob/master/copypaste-tuto/Gl0-opcodes.txt)\r\n- [GoneUp](https://github.com/GoneUp/Tera_PacketViewer/tree/master/Opcode%20DLL#readme)\r\n\r\n## Protocol\r\n\r\nTERA's network data follows a custom protocol. It is convenient to describe the\r\norder and meaning of each element in a \"packet\", which is done through a `.def`\r\nfile under the `protocol` directory, and named after the opcode it belongs to.\r\n\r\nEach line in the `.def` must consist of the following, in order:\r\n- An optional series of `-` for array definitions. These may be separated by\r\n  spaces. To nest arrays, just add another `-` to the front.\r\n- A field type. Valid types listed below.\r\n- At least one space.\r\n- The name of the field.\r\n\r\nA `#` and anything after it on the line are treated as comments and will be\r\nignored when parsing.\r\n\r\nThe following basic field types are supported:\r\n- `byte`: A single byte. Also used for booleans.\r\n- `float`: A four-byte floating-point number.\r\n- `int16`\r\n- `int32`\r\n- `int64`\r\n- `uint16`\r\n- `uint32`\r\n- `uint64`\r\n\r\nThe protocol also supports variable-length fields, along with accompanying\r\nmetadata. These are described with the following field types:\r\n- `count`: Acts as `uint16`. Dictates the length of an `array` or `bytes` field\r\n  of the same name.\r\n- `offset`: Acts as `uint16`. Indicates the byte offset from the beginning of\r\n  the message for an `array`, `bytes`, or `string` field of the same name.\r\n\r\nThe names of `count` and `offset` fields should correspond to another field with\r\none of these variable-length types:\r\n- `array`: Requires both `count` and `offset`.\r\n- `bytes`: A series of `byte` data. Requires both `count` and `offset`.\r\n- `string`: String data, encoded as null-terminated UTF-16LE (in other words, a\r\n  series of `uint16` where the final value is 0). Requires only `offset`.\r\n\r\nMore details on the original message format are below, while details on your\r\nlanguage's or library's implementation of these types should be described in\r\nyour library's documentation.\r\n\r\n### Message Format\r\n\r\nTERA's networking encodes all data in little-endian.\r\n\r\nThere are a few fields which are implied because they are never omitted. Every\r\npacket begins with two fields:\r\n- `uint16 length`, which describes the byte length of the message, including\r\n  this header.\r\n- `uint16 opcode`, which describes which kind of message this is. By looking up\r\n  which name has this number in the mapping, you will know what the message is\r\n  called.\r\n\r\nAdditionally, all array elements begin with two fields:\r\n- `offset here`, which can be used to verify correctness. If this is the first\r\n  element, the `offset` for the array should match this; otherwise, it should\r\n  match the `next` for the previous element.\r\n- `offset next`, which points to the byte offset of the next element in the\r\n  array, or zero if this is the final element.\r\n\r\nIn general, you will find `count` and `offset` fields at the beginning of a\r\nmessage or array definition, and their corresponding fields at the end.\r\n\r\n## Versioning\r\n\r\nProtocol definitions contain version information in the filename:\r\n`<NAME>.<VERSION>.def` where `<NAME>` is an opcode name and `<VERSION>` is an\r\ninteger starting from 1 and incrementing with each change.\r\n\r\n**When submitting changes, contributors _must_ leave older versions untouched\r\nand instead submit the changed definition as a new file with the version number\r\nincremented.**\r\n\r\nWhenever TERA receives a major patch, a tag will be added to the repository,\r\nand then the mappings will be updated and all outdated definition files will be\r\ndeleted.\r\n\r\n## Contributing\r\n\r\nFeel free to submit pull requests! Please read the above notice in bold.\r\n\r\nThere is also a Discord for discussion and updates on `tera-data` and all\r\n`tera-proxy`-related repositories: <https://discord.gg/D2BCbgq>\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/meishuu/tera-data.git"
  },
  "version": "1.0.0"
}

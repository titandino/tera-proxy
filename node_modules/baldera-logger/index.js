const fs = require('fs');
const bunyan = require('bunyan');

class ConsoleStream {
  constructor(level = bunyan.INFO) {
    this.level = level;
  }

  write(rec) {
    if (rec.level < this.level) return;

    console.log('[%s] (%s) %s: %s',
      rec.time.toTimeString().replace(/ \(.+\)$/, ''),
      bunyan.nameFromLevel[rec.level],
      rec.component,
      rec.msg
    );
  }

  get level() {
    return this._level;
  }

  set level(level) {
    this._level = bunyan.resolveLevel(level);
  }
}

const consoleStream = new ConsoleStream();

const logger = bunyan.createLogger({
  name: 'baldera',
  streams: [{
    name: 'console',
    level: 0,
    stream: consoleStream,
    type: 'raw',
  }],
  serializers: bunyan.stdSerializers,
});

function BalderaLogger(name) {
  return logger.child({ component: name });
}

Object.defineProperties(BalderaLogger, {
  consoleLevel: {
    value: function value(level) {
      if (level === undefined) {
        return consoleStream.level;
      } else {
        consoleStream.level = level;
      }
    },
  },

  logToFile: {
    value: function logToFile(fn = 'baldera.log') {
      logger.addStream({
        name: 'file',
        stream: fs.createWriteStream(fn),
        level: 'debug',
      });
    },
  },
});

module.exports = BalderaLogger;
